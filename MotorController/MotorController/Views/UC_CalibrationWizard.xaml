<UserControl x:Class="MotorController.Views.UC_CalibrationWizard"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MotorController.Views"
             xmlns:Helpers="clr-namespace:MotorController.Helpers"
             mc:Ignorable="d" 
             d:DesignHeight="30" d:DesignWidth="300">
    <Grid>
        <Grid.ColumnDefinitions>
            <!--<ColumnDefinition Width="5"/>
            <ColumnDefinition>
                <ColumnDefinition.Style>
                    <Style TargetType="{x:Type ColumnDefinition}">
                        <Setter Property="Width" Value="Auto" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding AdvanceMode_Calibration}" Value="false">
                                <Setter Property="Width" Value="0" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ColumnDefinition.Style>
            </ColumnDefinition>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="5"/>-->
            <ColumnDefinition>
                <ColumnDefinition.Style>
                    <Style TargetType="{x:Type ColumnDefinition}">
                        <Setter Property="Width" Value="0" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding isWizard}" Value="true">
                                <Setter Property="Width" Value="Auto" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ColumnDefinition.Style>
            </ColumnDefinition>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>

        <!--<CheckBox Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Width="16" 
                  IsChecked="{Binding CalibrationPerform}" 
                  IsEnabled="{Binding CalibrationEnabled}"/>
        <TextBlock Grid.Column="3" Width="120" Height="22" 
                    Foreground="White"
                    VerticalAlignment="Center" 
                    HorizontalAlignment="Center"
                    Text="{Binding CalibrationName}"/>-->
        <local:UC_Calibration Grid.Column="0">
            <local:UC_Calibration.Style>
                <Style TargetType="{x:Type local:UC_Calibration}">
                    <Setter Property="Height" Value="25" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding isWizard}" Value="true">
                            <Setter Property="Height" Value="22" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </local:UC_Calibration.Style>
        </local:UC_Calibration>
        <!--<Border BorderBrush="White" CornerRadius="0,4,4,0" Grid.Column="1">-->
            <!--<Border.Style>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="BorderThickness" Value="1" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding isWizard}" Value="true">
                            <Setter Property="BorderThickness" Value="0" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>-->
            <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center">
                <Grid Width="2"/>
                <TextBox Height="22" Width="100"
                 IsHitTestVisible="False"
                 IsReadOnly="True"
                 HorizontalContentAlignment="Center">
                    <TextBox.Style>
                        <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                            <Setter Property="Text" Value="idle" />
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding CalibStatus}" Value="5" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Text" Value="Stopped" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding CalibStatus}" Value="4" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Text" Value="Running" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding CalibStatus}" Value="3" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Text" Value="Disabled" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding CalibStatus}" Value="2" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Text" Value="Failure" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding CalibStatus}" Value="1" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Text" Value="Success" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                </TextBox.Style>
                </TextBox>
                <Grid Width="5"/>
                <Helpers:RoundBoolLed 
                              Width="20" Height="20" 
                              CurrStatus="{Binding CalibStatus}"
                              VerticalAlignment="Center" 
                              HorizontalAlignment="Center"/>
                <Grid Width="5"/>
            </StackPanel>
        <!--</Border>-->
    </Grid>
</UserControl>

<!--
    default
Rs232Interface.GetInstance.SendToParser(new PacketFields
                    {
                        Data2Send = 1,
                        ID = 63,
                        SubID = Convert.ToInt16(1),
                        IsSet = true,
                        IsFloat = false
                    }
                    );
    reset
     Rs232Interface.GetInstance.SendToParser(new PacketFields
                    {
                        Data2Send = 1,
                        ID = 63,
                        SubID = Convert.ToInt16(9),
                        IsSet = true,
                        IsFloat = false
                    }
                    );
    
    save
    Rs232Interface.GetInstance.SendToParser(new PacketFields
                    {
                        Data2Send = 1,
                        ID = 63,
                        SubID = Convert.ToInt16(0),
                        IsSet = true,
                        IsFloat = false
                    }
                    );
    Pre start:
1.	Speed and postion
51[5] = 51[6]= Fdb_Motor
2.	External encoder 50[4] = Enc_Fdb_None
3.	Peak current 52[2] = 52[1]

    
    -->
